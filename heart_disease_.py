# -*- coding: utf-8 -*-
"""Heart_disease .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JsKRi6ZpxyTOr-MQD0pThbJzX6GPJWHX

# **Project Name** - Heart Disease prediction with Machine Learning

 Project Type - Classification

 Contribution - Individual

 Member Name - Hari Kumar reddy

## Importing Libraries
"""

# Import Libraries
# Importing Numpy & Pandas for data processing & data wrangling
import pandas as pd
import numpy as np

# Importing  tools for visualization
import matplotlib.pyplot as plt
import seaborn as sns

# Import LabelEncoder from sklearn to convert categorical data into numerical format
from sklearn.preprocessing import LabelEncoder

# Import model selection libraries
from sklearn.model_selection import train_test_split

# Library used for ML Model implementation
from sklearn.naive_bayes import GaussianNB

# Import evaluation metric libraries
from sklearn.metrics import accuracy_score,precision_score, recall_score, f1_score ,confusion_matrix

# Library used to Save and load ML models quickly
import pickle

"""# Import Warnings"""

# Library used for ignore warnings
import warnings
warnings.filterwarnings('ignore')

# Reading the Dataset
df=pd.read_csv('/content/heart.csv')
print(df.head())

### Create a plot to display the percentage of the positive and negative heart disease
labels = ['yes', 'No']
values = df['HeartDisease'].value_counts().values
##
plt.pie(values, labels=labels, autopct='%1.0f%%')
plt.title('HeartDisease')
plt.show()
##

### Display chest pain types based on the Heart Disease
pd.crosstab(df.ChestPainType,df.HeartDisease).plot(kind = "bar", figsize = (8, 6))
plt.title('Heart Disease Frequency According to Chest Pain Type')
plt.xlabel('Chest Pain Type')
plt.xticks(np.arange(4), ('typical angina', 'atypical angina', 'non-anginal pain', 'asymptomatic'), rotation = 0)
plt.ylabel('Frequency')
plt.show()

### Get min, max and average of the age
print('Min age: ', min(df['Age']))
print('Max age: ', max(df['Age']))

##
### Display Heart Disease  According to Gender
pd.crosstab(df.Sex,df.HeartDisease).plot(kind = "bar", figsize = (8, 6))
plt.title('Heart Disease  According to Gender')
plt.xlabel('male & Female')
plt.xticks(np.arange(2), ('male', 'female'), rotation = 0)
plt.ylabel('Count')
plt.show()
##

#
### Display Heart Disease  According to RestingECG
pd.crosstab(df.RestingECG,df.HeartDisease).plot(kind = "bar", figsize = (8, 6))
plt.title('Heart Disease  According to RestingECG')
plt.xlabel('RestingECG')
plt.xticks(np.arange(3), ('Left ventricular hypertrophy', ' ST Elevation Myocardial Infarction.', 'Normal'), rotation = 0)
plt.ylabel('Count')
plt.show()
##

#
### Display Heart Disease  According to ExerciseAngina
pd.crosstab(df.ExerciseAngina,df.HeartDisease).plot(kind = "bar", figsize = (8, 6))
plt.title('Heart Disease  According to ExerciseAngina')
plt.xlabel('ExerciseAngina')
plt.xticks(np.arange(2), ( 'No','Yes'), rotation = 0)
plt.ylabel('Count')
plt.show()
##

##
### Display age distribution based on heart disease
sns.distplot(df[df['HeartDisease'] == 1]['Age'], label='Have heart disease')
sns.distplot(df[df['HeartDisease'] == 2]['Age'], label = 'Do not have heart disease')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Age Distribution based on Heart Disease')
plt.show()
##

#Get min, max and average of the age of the people do not have heart diseas
print('Min age of people who do not have heart disease: ', min(df[df['HeartDisease'] == 1]['Age']))
print('Max age of people who do not have heart disease: ', max(df[df['HeartDisease'] == 1]['Age']))

# Create an instance of LabelEncoder
le = LabelEncoder()

# Encode categorical columns into numerical values
df['Sex'] = le.fit_transform(df['Sex'])
df['ChestPainType'] = le.fit_transform(df['ChestPainType'])
df['RestingECG'] = le.fit_transform(df['RestingECG'])
df['ExerciseAngina'] = le.fit_transform(df['ExerciseAngina'])
df['ST_Slope'] = le.fit_transform(df['ST_Slope'])

print(df.head())

# Define the feature matrix (X) by dropping the target column 'HeartDisease'
x = df.drop(columns=['HeartDisease'])

# Define the target variable (y) which contains only the 'HeartDisease' column
y = df['HeartDisease']

print(x)
print(y)

# Split the dataset into training and testing sets
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=4)

print(x_test)
print(y_test)

# Create an instance of the Gaussian Naive Bayes classifier
NB = GaussianNB()

# Train the Naive Bayes model using the training dataset
NB.fit(x_train, y_train)

# Predict the target values using the trained Naive Bayes model
y_pred = NB.predict(x_test)

# Calculate and print the accuracy of the model
print('Naive Bayes ACCURACY is', accuracy_score(y_test, y_pred))

# Generate the confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

# Predict the outcome for a single test case using the trained Naive Bayes model
testPrediction = NB.predict([[19, 1, 4, 120, 166, 0, 1, 138, 0, 0, 2]])

# Check the predicted value and print the result accordingly
if testPrediction == 1:
    print("The Patient Has Heart Disease, please consult a doctor.")
else:
    print("The Patient is Normal.")

# Calculate precision
precision = precision_score(y_test, y_pred)
print("Precision:", precision)

# Calculate recall
recall = recall_score(y_test, y_pred)
print("Recall:", recall)

# Calculate F1 score
f1 = f1_score(y_test, y_pred)
print("F1 Score:", f1)

# Dump to a file
with open('NB.pkl','wb') as file:
  pickle.dump(NB,file)